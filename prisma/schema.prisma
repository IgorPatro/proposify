generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  uuid          String    @unique @default(uuid())
  emailVerified DateTime?
  firstName     String
  lastName      String
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  email         String    @unique
  password      String
  company       Company?  @relation(fields: [companyId], references: [id])
  companyId     Int?
  Asset         Asset[]
}

// NOTE: For now we skip tracking, only base tracking is enabled
model VisitSession {
  id               Int                @id @default(autoincrement())
  uuid             String             @unique @default(uuid())
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  offer            Offer              @relation(fields: [offerId], references: [id])
  offerId          Int
  observationEvent ObservationEvent[]
}

// NOTE: For now we skip tracking, only base tracking is enabled
model ObservationEvent {
  id             Int          @id @default(autoincrement())
  uuid           String       @unique @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  timeSpent      Int
  blockUuid      String
  visitSession   VisitSession @relation(fields: [visitSessionId], references: [id])
  visitSessionId Int
}

model Visit {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  device    String?
  browser   String?
  os        String?
  ip        String?
  city      String?
  country   String?
  latitude  Float?
  longitude Float?
  postal    String?
  state     String?
  offer     Offer    @relation(fields: [offerId], references: [id])
  offerId   Int
}

model Company {
  id        Int        @id @default(autoincrement())
  uuid      String     @unique @default(uuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  name      String
  User      User[]
  Template  Template[]
  Offer     Offer[]
  Customer  Customer[]
  Asset     Asset[]
}

model Asset {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String
  type      String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  company   Company  @relation(fields: [companyId], references: [id])
  companyId Int
}

model Template {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  company   Company  @relation(fields: [companyId], references: [id])
  companyId Int
  theme     String
  blocks    Json?
  logoUrl   String?
}

model Offer {
  id           Int            @id @default(autoincrement())
  uuid         String         @unique @default(uuid())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  name         String
  company      Company        @relation(fields: [companyId], references: [id])
  companyId    Int
  theme        String
  blocks       Json?
  customer     Customer       @relation(fields: [customerId], references: [id])
  customerId   Int
  logoUrl      String?
  Visit        Visit[]
  VisitSession VisitSession[]
}

model Customer {
  id        Int      @id @default(autoincrement())
  uuid      String   @unique @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String
  lastName  String
  email     String?
  phone     String?
  city      String?
  country   String?
  zipCode   String?
  street    String?
  Offer     Offer[]
  // Note: Owner of the customer
  company   Company  @relation(fields: [companyId], references: [id])
  companyId Int
}
